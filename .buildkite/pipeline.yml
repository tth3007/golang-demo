env:
  APP_NAME: "demo"
#   ROLE_ARN: arn:aws:iam::$AWS_ACCOUNT_ID:role/my-role
#   IMAGE_NAME: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/my-repo
#   CLUSTER: my-cluster
#   SERVICE: my-service
#   AWS_PAGER: "" # Disable AWS CLI pagination in CI

steps:
  - label: ":golang: Build Go Project"
    key: "build"
    commands:
      - go mod tidy
      - go build -o ${APP_NAME} .
  
  - label: ":osv-scanner: Scan Code"
    key: "scan"
    depends_on: "build"
    commands:
      - go vet ./...
      - staticcheck ./...

  - label: ":testengine: Run tests"
    key: "test"
    depends_on: "scan"
    commands:
      - go test ./tests
  
  # - label: "Run Tests and generate report"
  #   commands:
  #     - go install gotest.tools/gotestsum/cmd/gotestsum@latest && gotestsum --junitfile results.xml --format standard go test -v ./tests
  
  # - label: "Upload tests results"
  #   commands:
  #     - buildkite-agent artifact upload results.xml

  - label: ":docker: Build and Tag Docker Image"
    key: "build-image"
    depends_on: "test"
    commands:
      - docker build -t ${APP_NAME}:latest .

  # - label: "Push Image to ECR"
  #   key: "push-image"
  #   depends_on: "build-image"
  #   commands:
  #     - docker push $IMAGE_NAME:latest
  #   plugins:
  #     - aws-assume-role-with-web-identity#v1.0.0:
  #         role_arn: $ROLE_ARN
  #     - ecr#v2.8.0:
  #         login: true
  
  # - label: "Push Docker Image"
  #   commands:
  #     - docker tag myapp:latest <your-docker-repo>/myapp:latest
  #     - docker push <your-docker-repo>/myapp:latest

#===================== CD ================
  # - label: ":ecs: Deploy service"
  #   depends_on: "push-image"
  #   timeout_in_minutes: 5
  #   command: |
  #     aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment
  #     aws ecs wait services-stable --cluster $CLUSTER --service $SERVICE
  #   plugins:
  #     - aws-assume-role-with-web-identity#v1.0.0:
  #         role_arn: $ROLE_ARN